<?php

namespace App\Tests;

use App\Command\MorFileParserCommand;
use App\Entity\ParsedFilesMor;
use Doctrine\ORM\EntityManagerInterface;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;

class MorFileParserCommandTest extends TestCase
{
    private $loggerMock;
    private $entityManagerMock;
    private $commandTester;

    private $morParsMock;

    protected function setUp(): void
    {
        $this->loggerMock = $this->getMockBuilder(LoggerInterface::class)->getMock();
        $this->entityManagerMock = $this->getMockBuilder(EntityManagerInterface::class)->getMock();
        $this->morParsMock = $this->getMockBuilder(ParsedFilesMor::class)->getMock();

        $application = new Application();
        $application->add(new MorFileParserCommand($this->entityManagerMock, $this->loggerMock));
        $command = $application->find('mor_file:parser');
        $this->commandTester = new CommandTester($command);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testExecute()
    {
        $this->commandTester->execute(['file' => 'data/mor-file-clean.txt']);

        $output = $this->commandTester->getDisplay();
        $this->assertStringContainsString('File parsed and inserted into DB!', $output);
    }
}
